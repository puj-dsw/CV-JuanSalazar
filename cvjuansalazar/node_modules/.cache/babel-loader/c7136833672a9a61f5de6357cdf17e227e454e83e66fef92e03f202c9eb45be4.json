{"ast":null,"code":"import React, { Fragment } from 'react';\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar styles = {\n  \"notebook_container\": \"_lAcAi\",\n  \"input_prompt\": \"_R3qoq\",\n  \"output_prompt\": \"_2Uqcj\",\n  \"inner_cell\": \"_2IBNw\",\n  \"dataframe\": \"_2uSta\",\n  \"output_stderr\": \"_RMCAr\",\n  \"ansi_black_fg\": \"_2l_MQ\",\n  \"ansi_red_fg\": \"_2bmOe\",\n  \"ansi_green_fg\": \"_KAjmd\",\n  \"ansi_yellow_fg\": \"_2Ai70\",\n  \"ansi_blue_fg\": \"_1cvmp\",\n  \"ansi_magenta_fg\": \"_1FCJ1\",\n  \"ansi_cyan_fg\": \"_2O1-i\",\n  \"ansi_white_fg\": \"_2Iaa9\"\n};\nvar ansiClassNames = {\n  30: \"ansi_black_fg \" + styles.ansi_black_fg,\n  31: \"ansi_red_fg \" + styles.ansi_red_fg,\n  32: \"ansi_green_fg \" + styles.ansi_green_fg,\n  33: \"ansi_yellow_fg \" + styles.ansi_yellow_fg,\n  34: \"ansi_blue_fg \" + styles.ansi_blue_fg,\n  35: \"ansi_magenta_fg \" + styles.ansi_magenta_fg,\n  36: \"ansi_cyan_fg \" + styles.ansi_cyan_fg,\n  37: \"ansi_white_fg \" + styles.ansi_white_fg\n};\nfunction ansiCodeToClassName(ansiCode) {\n  var codes = ansiCode.slice(2, -1).split(';');\n  if (codes === ['0']) return null;\n  return codes.map(function (c) {\n    return ansiClassNames[c];\n  }).join(' ');\n}\nvar AnsiPre = function AnsiPre(_ref) {\n  var children = _ref.children;\n  var r = /(\\x1b\\[.+?m)/g;\n  var splitted = children.split(r);\n  var spans = [];\n  var lastClassName = null;\n  splitted.forEach(function (s, i) {\n    if (r.test(s)) {\n      lastClassName = ansiCodeToClassName(s);\n      return;\n    }\n    if (!lastClassName) spans.push(s);else spans.push(React.createElement(\"span\", {\n      className: lastClassName,\n      key: i\n    }, s));\n  });\n  return React.createElement(\"pre\", null, spans);\n};\nvar base64ToImage = function base64ToImage(mime, base64) {\n  return React.createElement(\"img\", {\n    src: \"data:\" + mime + \";base64,\" + base64\n  });\n};\nfunction getDataFrame(raw) {\n  var rows = raw.split('\\n');\n  var elements = rows.map(function (r) {\n    return r.split(/\\s+/);\n  });\n  return React.createElement(\"table\", {\n    className: \"dataframe \" + styles.dataframe\n  }, React.createElement(\"thead\", null, React.createElement(\"tr\", null, React.createElement(\"td\", null), elements[0].slice(1).map(function (h, hidx) {\n    return React.createElement(\"th\", {\n      key: hidx,\n      scope: \"col\"\n    }, h);\n  }))), React.createElement(\"tbody\", null, elements.slice(1).map(function (row, rowidx) {\n    return React.createElement(\"tr\", {\n      key: rowidx\n    }, React.createElement(\"th\", {\n      scope: \"row\"\n    }, row[0]), row.slice(1).map(function (d, idx) {\n      return React.createElement(\"td\", {\n        key: idx\n      }, d);\n    }));\n  })));\n}\nvar DisplayDataOutput = function DisplayDataOutput(_ref) {\n  var output = _ref.output;\n  var datas = output.data;\n  var formats = ['text/html', 'image/svg+xml', 'image/png', 'image/jpeg', 'text/plain'];\n  if (formats[0] in datas && formats[4] in datas && datas[formats[0]].join('').includes('class=\"dataframe\"') && !/^<.+>$/.test(datas[formats[4]])) {\n    return getDataFrame(datas[formats[4]].join(''));\n  }\n  for (var _i = 0, _formats = formats; _i < _formats.length; _i++) {\n    var format = _formats[_i];\n    if (format in datas) {\n      var datalines = datas[format];\n      if (format === 'image/svg+xml') {\n        var svg = datalines.join('');\n        return React.createElement(\"img\", {\n          src: \"data:image/svg+xml;utf8,\" + svg\n        });\n      }\n      if (format === 'text/html') return React.createElement(\"iframe\", {\n        srcDoc: datalines.join('')\n      });\n      if (format.startsWith('image/')) {\n        if (Array.isArray(datalines)) return base64ToImage(format, datalines[0]);\n        return base64ToImage(format, datalines);\n      }\n      return React.createElement(AnsiPre, null, datalines.join(''));\n    }\n  }\n  throw new Error('Unsupported output format');\n};\nvar StreamOutput = function StreamOutput(_ref2) {\n  var output = _ref2.output;\n  var className = \"output_stream \" + styles.output_stream + \" \" + (output.name === 'stderr' ? \"output_stderr \" + styles.output_stderr : '');\n  return React.createElement(\"div\", {\n    className: className\n  }, React.createElement(AnsiPre, null, output.text.join('')));\n};\nvar ErrorOutput = function ErrorOutput(_ref3) {\n  var output = _ref3.output;\n  return React.createElement(AnsiPre, null, output.traceback.join(''));\n};\nvar CodeCell = function CodeCell(_ref4) {\n  var cell = _ref4.cell,\n    props = _objectWithoutPropertiesLoose(_ref4, [\"cell\"]);\n  var source = cell.source.join('');\n  return React.createElement(Fragment, null, React.createElement(\"div\", {\n    className: \"input_prompt \" + styles.input_prompt\n  }, React.createElement(\"pre\", null, \"In [\" + (cell.execution_count || ' ') + \"]:\")), React.createElement(\"div\", {\n    className: \"inner_cell \" + styles.inner_cell\n  }, React.createElement(props.code, {\n    language: props.language\n  }, source)), cell.outputs.map(function (output, i) {\n    return React.createElement(Fragment, {\n      key: i\n    }, output.output_type === 'execute_result' && React.createElement(\"div\", {\n      className: \"output_prompt \" + styles.output_prompt\n    }, React.createElement(\"pre\", null, \"Out[\" + output.execution_count + \"]:\")), React.createElement(\"div\", {\n      className: \"inner_cell \" + styles.inner_cell\n    }, function () {\n      switch (output.output_type) {\n        case 'execute_result':\n        case 'display_data':\n          return React.createElement(DisplayDataOutput, {\n            output: output\n          });\n        case 'stream':\n          return React.createElement(StreamOutput, {\n            output: output\n          });\n        case 'error':\n          return React.createElement(ErrorOutput, {\n            output: output\n          });\n        default:\n          return undefined;\n      }\n    }()));\n  }));\n};\nfunction NbViewer(_ref5) {\n  var _ipynb$metadata$kerne, _ipynb$metadata$langu;\n  var source = _ref5.source,\n    _ref5$markdown = _ref5.markdown,\n    markdown = _ref5$markdown === void 0 ? PlainMarkdown : _ref5$markdown,\n    _ref5$code = _ref5.code,\n    code = _ref5$code === void 0 ? PlainCode : _ref5$code;\n  if (!source) return null;\n  var ipynb = typeof source === 'string' ? JSON.parse(source) : source;\n  if (ipynb.nbformat !== 4) throw new Error('react-nbviewer currently supports nbformat 4 only');\n  var language = ((_ipynb$metadata$kerne = ipynb.metadata.kernelspec) === null || _ipynb$metadata$kerne === void 0 ? void 0 : _ipynb$metadata$kerne.language) || ((_ipynb$metadata$langu = ipynb.metadata.language_info) === null || _ipynb$metadata$langu === void 0 ? void 0 : _ipynb$metadata$langu.name) || 'python';\n  return React.createElement(\"div\", {\n    className: \"notebook_container \" + styles.notebook_container\n  }, ipynb.cells.map(function (cell, i) {\n    return cell.cell_type === 'code' ? React.createElement(CodeCell, {\n      cell: cell,\n      language: language,\n      code: code,\n      key: i\n    }) : React.createElement(\"div\", {\n      className: \"inner_cell \" + styles.inner_cell\n    }, React.createElement(markdown, {\n      source: cell.source.join(''),\n      key: i\n    }, null));\n  }));\n}\nfunction PlainMarkdown(props) {\n  return React.createElement(\"div\", null, props.source);\n}\nfunction PlainCode(props) {\n  return React.createElement(\"pre\", null, React.createElement(\"code\", null, props.children));\n}\nexport default NbViewer;","map":{"version":3,"mappings":"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","names":["ansiClassNames","styles","ansi_black_fg","ansi_red_fg","ansi_green_fg","ansi_yellow_fg","ansi_blue_fg","ansi_magenta_fg","ansi_cyan_fg","ansi_white_fg","ansiCodeToClassName","ansiCode","codes","slice","split","map","c","join","AnsiPre","children","r","splitted","spans","lastClassName","forEach","s","i","test","push","React","className","key","base64ToImage","mime","base64","src","getDataFrame","raw","rows","elements","dataframe","h","hidx","scope","row","rowidx","d","idx","DisplayDataOutput","output","datas","data","formats","includes","format","datalines","svg","srcDoc","startsWith","Array","isArray","Error","StreamOutput","output_stream","name","output_stderr","text","ErrorOutput","traceback","CodeCell","cell","props","source","Fragment","input_prompt","execution_count","inner_cell","code","language","outputs","output_type","output_prompt","undefined","NbViewer","markdown","PlainMarkdown","PlainCode","ipynb","JSON","parse","nbformat","metadata","kernelspec","language_info","_ipynb$metadata$langu","notebook_container","cells","cell_type","createElement"],"sources":["/Users/juansalazar/PFWA/Personal/Tux_/ntwebapp/personalwebapp/node_modules/react-nbviewer/src/AnsiPre.tsx","/Users/juansalazar/PFWA/Personal/Tux_/ntwebapp/personalwebapp/node_modules/react-nbviewer/src/index.tsx"],"sourcesContent":["import React from 'react'\nimport styles from './index.css'\n\nconst ansiClassNames = {\n  30: `ansi_black_fg ${styles.ansi_black_fg}`,\n  31: `ansi_red_fg ${styles.ansi_red_fg}`,\n  32: `ansi_green_fg ${styles.ansi_green_fg}`,\n  33: `ansi_yellow_fg ${styles.ansi_yellow_fg}`,\n  34: `ansi_blue_fg ${styles.ansi_blue_fg}`,\n  35: `ansi_magenta_fg ${styles.ansi_magenta_fg}`,\n  36: `ansi_cyan_fg ${styles.ansi_cyan_fg}`,\n  37: `ansi_white_fg ${styles.ansi_white_fg}`,\n}\n\nfunction ansiCodeToClassName(ansiCode: string) {\n  const codes = ansiCode.slice(2, -1).split(';')\n  if (codes === ['0'])\n    return null\n  return codes.map(c => ansiClassNames[c]).join(' ')\n}\n\nconst AnsiPre = ({ children }: { children: string }) => {\n  // <pre> with ANSI color codes\n  // \\033[SGR;FG;BGm\n  const r = /(\\x1b\\[.+?m)/g\n  const splitted = children.split(r)\n  const spans: React.ReactChild[] = []\n  let lastClassName: string | null = null\n  splitted.forEach((s, i) => {\n    if (r.test(s)) {\n      lastClassName = ansiCodeToClassName(s)\n      return\n    }\n    if (!lastClassName) spans.push(s)\n    else spans.push(<span className={lastClassName} key={i}>{s}</span>)\n  })\n  return <pre>{spans}</pre>\n}\n\nexport default AnsiPre\n","import React, { Fragment } from 'react'\nimport AnsiPre from './AnsiPre'\nimport styles from './index.css'\n\nconst base64ToImage = (mime: string, base64: string) => (\n  <img src={`data:${mime};base64,${base64}`} />\n)\n\n// Putting the 'text/html' output on page is ugly and unsafe\n// Instead, let's parse the raw output\nfunction getDataFrame(raw: string) {\n  const rows = raw.split('\\n')\n  const elements = rows.map(r => r.split(/\\s+/))\n  return (\n    <table className={`dataframe ${styles.dataframe}`}>\n      <thead>\n        <tr>\n          <td />\n          {/* Column headers */}\n          {elements[0].slice(1).map((h, hidx) => <th key={hidx} scope=\"col\">{h}</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        {elements.slice(1).map((row, rowidx) => (\n          <tr key={rowidx}>\n            {/* Row header */}\n            <th scope=\"row\">{row[0]}</th>\n            {row.slice(1).map((d, idx) => <td key={idx}>{d}</td>)}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nconst DisplayDataOutput = ({ output }: {\n  output: NbDisplayDataOutput\n}) => {\n  const { data: datas } = output\n  const formats = ['text/html', 'image/svg+xml', 'image/png', 'image/jpeg', 'text/plain']\n\n  // e.g. pandas.DataFrame\n  if ((formats[0] in datas) && (formats[4] in datas) &&\n    datas[formats[0]].join('').includes('class=\"dataframe\"') &&\n    ! /^<.+>$/.test(datas[formats[4]])) {\n    return getDataFrame(datas[formats[4]].join(''))\n  }\n\n  for (const format of formats) {\n    if (format in datas) {\n      const datalines = datas[format]\n      if (format === 'image/svg+xml') {\n        const svg = datalines.join('')\n        return <img src={`data:image/svg+xml;utf8,${svg}`} />\n      }\n      if (format === 'text/html')\n        return <iframe srcDoc={datalines.join('')} />\n      if (format.startsWith('image/')) {\n        if (Array.isArray(datalines))\n          return base64ToImage(format, datalines[0])\n        return base64ToImage(format, datalines)\n      }\n      return <AnsiPre>{datalines.join('')}</AnsiPre>\n    }\n  }\n  throw new Error('Unsupported output format')\n}\n\nconst StreamOutput = ({ output }: { output: NbStreamOutput }) => {\n  const className = `output_stream ${styles.output_stream} ${\n    output.name === 'stderr' ? `output_stderr ${styles.output_stderr}` : ''\n    }`\n  return (\n    <div className={className}>\n      <AnsiPre>{output.text.join('')}</AnsiPre>\n    </div>\n  )\n}\n\nconst ErrorOutput = ({ output }: { output: NbErrorOutput }) => {\n  // Some ANSI escape codes are used to colorize the error output\n  return <AnsiPre>{output.traceback.join('')}</AnsiPre>\n}\n\ninterface CodeComponentProps {\n  language: string\n  children: string\n}\n\nconst CodeCell = ({ cell, ...props }: {\n  cell: NbCodeCell,\n  language: string,\n  code: React.ElementType<CodeComponentProps>\n}) => {\n  const source = cell.source.join('')\n\n  return (\n    <Fragment>\n      {/* \"In [...]:\" for every code cell */}\n      <div className={`input_prompt ${styles.input_prompt}`}>\n        <pre>{`In [${cell.execution_count || ' '}]:`}</pre>\n      </div>\n      <div className={`inner_cell ${styles.inner_cell}`}>\n        <props.code language={props.language}>{source}</props.code>\n      </div>\n      {cell.outputs.map((output, i) => {\n        return <Fragment key={i}>\n\n          {output.output_type === 'execute_result' &&\n            <div className={`output_prompt ${styles.output_prompt}`}>\n              <pre>{`Out[${output.execution_count}]:`}</pre>\n            </div>}\n\n          <div className={`inner_cell ${styles.inner_cell}`}>\n            {(() => {\n              switch (output.output_type) {\n                // The only difference between these two is \"Out[...]:\"\n                case 'execute_result':\n                case 'display_data':\n                  return <DisplayDataOutput output={output} />\n                case 'stream':\n                  return <StreamOutput output={output} />\n                case 'error':\n                  return <ErrorOutput output={output} />\n                default:\n                  return undefined\n              }\n            })()}\n          </div>\n\n        </Fragment>\n      })}\n    </Fragment>\n  )\n}\n\ninterface MarkdownProps {\n  source: string\n}\n\ninterface NbViewerProps {\n  source: string | NbFormat,\n  markdown?: React.ElementType<MarkdownProps>,\n  code?: React.ElementType<CodeComponentProps>\n}\n\nexport default function NbViewer({\n  source,\n  markdown = PlainMarkdown,\n  code = PlainCode\n}: NbViewerProps) {\n  if (!source) return null\n  const ipynb: NbFormat = typeof source === 'string' ? JSON.parse(source) : source\n  // TODO: support more versions\n  if (ipynb.nbformat !== 4)\n    throw new Error('react-nbviewer currently supports nbformat 4 only')\n\n  const language =\n    ipynb.metadata.kernelspec?.language ||\n    ipynb.metadata.language_info?.name || 'python'\n\n  return (\n    <div className={`notebook_container ${styles.notebook_container}`}>\n      {ipynb.cells.map((cell, i) => (\n        cell.cell_type === 'code' ?\n          <CodeCell cell={cell} language={language} code={code} key={i} /> :\n\n          <div className={`inner_cell ${styles.inner_cell}`}>{\n            // Not using JSX here because \"markdown\" is in lower case\n            React.createElement(markdown, {\n              source: cell.source.join(''),\n              key: i\n            }, null)\n          }</div>\n      ))}\n    </div>\n  )\n}\n\n// Defaults when not provided\nfunction PlainMarkdown(props: MarkdownProps) {\n  return <div>{props.source}</div>\n}\n\nfunction PlainCode(props: CodeComponentProps) {\n  return <pre><code>{props.children}</code></pre>\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}